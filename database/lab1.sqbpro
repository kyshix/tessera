<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/kitty.shi/Documents/tessera/database/tessera.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="1"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1176"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainEvents"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Events" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="53"/><column index="2" value="76"/><column index="3" value="300"/><column index="4" value="72"/><column index="5" value="62"/><column index="6" value="57"/><column index="7" value="139"/><column index="8" value="300"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Tickets" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="3" mode="0"/></sort><column_widths><column index="1" value="54"/><column index="2" value="53"/><column index="3" value="47"/><column index="4" value="84"/><column index="5" value="86"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Users" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="3" mode="0"/></sort><column_widths><column index="1" value="47"/><column index="2" value="89"/><column index="3" value="158"/><column index="4" value="143"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="demo" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="107"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="LAB 1">CREATE TABLE IF NOT EXISTS Events(
	event_id INTEGER PRIMARY KEY,
	name TEXT NOT NULL,
	description TEXT,
	date DATE,
	start_time TIME,
	end_time TIME,
	location TEXT,
	image_url TEXT
); 

CREATE TABLE IF NOT EXISTS Users(
	user_id INTEGER PRIMARY KEY,
	username TEXT NOT NULL UNIQUE,
	password_hash TEXT NOT NULL,
	email TEXT NOT NULL  UNIQUE
);

CREATE TABLE IF NOT EXISTS Tickets (
    ticket_id INTEGER PRIMARY KEY,
    event_id INTEGER,
    user_id INTEGER,
    purchase_date DATE,
    price REAL,
    FOREIGN KEY (event_id) REFERENCES Events(event_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);

/*Populating Events DB*/
INSERT INTO Events (name, description, date, time, location) VALUES 
('All Things Go', 'Music Festival of the Year', '2024-09-28', '8:30', 'Merriweather Post Pavilion'), 
('Mitski', 'Concert', '2024-08-29', '6:30', 'Merriweather Post Pavilion'), 
('Wave to Earth', 'Concert', '2024-10-21', '7:00', 'Fillmore Silver Spring');
INSERT INTO Events (name, description, date, time, location) VALUES 
('Inside Out 2', 'Movie', '2024-06-21', '3:00', 'AMC Theaters'), ('Chappell Roan', 'Concert', '2024-10-02', '8:33', 'Madison Square Garden');
DELETE FROM Events;

/*Populating Users DB*/
INSERT INTO Users (username, password_hash, email) VALUES 
('kitty.s', '100000', 'kitty.s@TM.com'), 
('nithika.r', '100001', 'nithika.r@TM.com'),
('logan.k', '100002', 'logan.k@TM.com'),
('ethan.k', '100003', 'ethan.k@TM.com'),
('talha.m', '100004', 'talha.m@TM.com');

/*Populating Tickets DB*/
INSERT INTO Tickets(event_id, user_id, purchase_date, price) VALUES 
(1, 1, '2024-05-19', 178.57), (2, 4, '2024-07-02', 89.45);
INSERT INTO Tickets(event_id, user_id, purchase_date, price) VALUES 
(3, 2, '2024-04-27', 248.78), (3, 3, '2024-04-27', 302.56), (3, 1, '2024-04-27',59.89), (1,2, '2024-07-05', 709.67);
INSERT INTO Tickets(event_id, user_id, purchase_date, price) VALUES 
(3, 5, '2024-03-25', 36.22), (2, 5, '2024-05-18', 23.24);
INSERT INTO Tickets(event_id, user_id, purchase_date, price) VALUES
(2, 1, '2024-06-23', 244.26);

/*HW1
Write a Query that returns all the tickets for a specifc user
*/
SELECT * FROM Tickets WHERE user_id = 1;
SELECT * FROM Tickets WHERE user_id = 2;
SELECT * FROM Tickets WHERE user_id = 3;
SELECT * FROM Tickets WHERE user_id = 4;
SELECT * FROM Tickets WHERE user_id = 5;

/*HW2
Write a Query that returns events between certain dates
*/
SELECT * FROM Events WHERE date &lt; '2024-10-01';
SELECT * FROM Events WHERE date &gt; '2024-09-01';
SELECT * FROM Events WHERE date &gt; '2024-08-01' AND date &lt; '2024-09-17';

/*HW3
Write a Query that returns users who have spent more than $100.00 on tickets
*/
SELECT * FROM Tickets WHERE price &gt; 100; /*most basic solution*/
/*complicated solution that only returns the users that have a combined total spent of more than $100 on tickets*/
SELECT Users.username, sum(price) FROM Users INNER JOIN Tickets ON Tickets.user_id = Users.user_id GROUP BY Users.user_id HAVING sum(price) &gt; 100; 

/*HW4
Get a leaderboard! In your test data, who has the most tickets?
*/
SELECT Users.username, COUNT(*) AS '# tickets' FROM Users INNER JOIN Tickets ON Tickets.user_id = Users.user_id GROUP BY Users.username ORDER BY COUNT(*) DESC;

/*HW5
Write a single query that pulls every unique username in the database, and lists an
aggregated value representing the total amount of money the user has spent on tickets
*/
SELECT DISTINCT Users.username, sum(price) AS 'total spent' FROM Users INNER JOIN Tickets ON Tickets.user_id = Users.user_id GROUP BY Users.username;

SELECT  DISTINCT Users.email FROM Users INNER JOIN Tickets ON Tickets.user_id = Users.user_id GROUP BY Users.username WHERE ; 


DELETE FROM Users; 

SELECT username FROM Users WHERE username = 'nit'
SELECT password_hash FROM Users WHERE username = 'kyshiive'
UPDATE Events FROM Events WHERE name = 'Mitski'
SELECT * FROM Events

UPDATE Users SET username = 'kitty.shi' WHERE username = 'kyshiive'
SELECT * from Users WHERE username = 'nit'

UPDATE Users SET username = 'kitty.shi',email = 'shi@TM.com' WHERE username = 'kyshiive'
UPDATE Users SET username = ? WHERE username = ?

ALTER TABLE Events ADD location
ALTER TABLE Events ADD image_url
ALTER TABLE Events ADD end_time
ALTER TABLE Events  RENAME COLUMN time TO start_time

DELETE  FROM Events</sql><current_tab id="0"/></tab_sql></sqlb_project>
